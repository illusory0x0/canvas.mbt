package "illusory0x0/canvas/canvas"

import(
  "illusory0x0/canvas/basic"
  "illusory0x0/canvas/cache"
  "illusory0x0/canvas/dom"
)

// Values
fn entry() -> Unit

// Types and methods
pub enum Element {
  Layout(@cache.Node[(@basic.Size, Array[(@basic.Vector, Element)])])
  Render(&Renderable)
  Handle(Element, Handler)
}
impl Element {
  add_handler(Self, Handler) -> Self
  hstack(Array[Self], spacing~ : Int) -> Self
  layer(Array[(@basic.Vector, Self)]) -> Self
  round_border(Self, thickness~ : @cache.Node[Int], color~ : @cache.Node[@basic.Color], radius~ : @cache.Node[Int]) -> Self
  round_padding(Self, thickness~ : @cache.Node[Int], color~ : @cache.Node[@basic.Color], radius~ : @cache.Node[Int]) -> Self
  size(Self) -> @basic.Size
  spacer(@basic.Size) -> Self
  to_layout_sequence(Self, @basic.Vector) -> Array[(@basic.Vector, Self)]
  to_render_sequence(Self, @basic.Vector) -> Iter[(@basic.Vector, &Renderable)]
  vstack(Array[Self], spacing~ : Int) -> Self
}
impl DepsKind for Element
impl Show for Element

pub struct Handler {
  id : Int
  on_click : (() -> Unit)?
  on_double_click : (() -> Unit)?
  on_mouse_enter : (() -> Unit)?
  on_mouse_leave : (() -> Unit)?
}
impl Handler {
  new(on_click? : () -> Unit, on_double_click? : () -> Unit, on_mouse_enter? : () -> Unit, on_mouse_leave? : () -> Unit) -> Self
}
impl Show for Handler

pub(all) struct Rectangle {
  color : @cache.Node[@basic.Color]
  size : @cache.Node[@basic.Size]
  rnode : &@cache.VNode
}
impl Rectangle {
  new(color~ : () -> @basic.Color, size~ : () -> @basic.Size) -> Self
}
impl DepsKind for Rectangle
impl Renderable for Rectangle

pub(all) struct RoundedBorder {
  color : @cache.Node[@basic.Color]
  size : @cache.Node[@basic.Size]
  radius : @cache.Node[Int]
  thickness : @cache.Node[Int]
  rnode : &@cache.VNode
}
impl RoundedBorder {
  new(color~ : @cache.Node[@basic.Color], size~ : @cache.Node[@basic.Size], radius~ : @cache.Node[Int], thickness~ : @cache.Node[Int]) -> Self
}
impl DepsKind for RoundedBorder
impl Renderable for RoundedBorder

pub(all) struct RoundedRectangle {
  color : @cache.Node[@basic.Color]
  size : @cache.Node[@basic.Size]
  radius : @cache.Node[Int]
  rnode : &@cache.VNode
}
impl RoundedRectangle {
  new(color~ : @cache.Node[@basic.Color], size~ : @cache.Node[@basic.Size], radius~ : @cache.Node[Int]) -> Self
}
impl DepsKind for RoundedRectangle
impl Renderable for RoundedRectangle

pub(all) struct Text {
  color : @cache.Node[@basic.Color]
  size : @cache.Node[@basic.Size]
  text : @cache.Node[String]
  font : @cache.Node[@basic.Font]
  rnode : &@cache.VNode
}
impl Text {
  new(text~ : @cache.Node[String], font~ : @cache.Node[@basic.Font], color~ : @cache.Node[@basic.Color]) -> Self
}
impl DepsKind for Text
impl Renderable for Text

pub struct Window {
  size : @cache.Node[@basic.Size]
  dpr : @cache.Node[Int]
}
impl Window {
  sync(Self) -> Unit
  sync_from_dom(Self, @dom.Window) -> Unit
}
impl Show for Window

impl Renderable {
  render_iter(@dom.CanvasRenderingContext2D, Iter[(@basic.Vector, &Self)]) -> Unit
}
impl Show for &Renderable

// Type aliases
pub typealias OnClick = () -> Unit

pub typealias OnMouseEnter = () -> Unit

pub typealias OnMouseLeave = () -> Unit

// Traits
pub(open) trait DepsKind {
  render_node(Self) -> &@cache.VNode
  layout_node(Self) -> &@cache.VNode
}

pub(open) trait Renderable : DepsKind {
  size(Self) -> @basic.Size
  render(Self, @basic.Vector, @dom.CanvasRenderingContext2D) -> Unit
}

