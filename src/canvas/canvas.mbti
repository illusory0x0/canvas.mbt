package illusory0x0/canvas/canvas

alias @illusory0x0/canvas/dom as @dom
alias @moonbitlang/core/quickcheck as @quickcheck

// Values
fn entry() -> Unit

fn hsl(UInt, UInt, UInt) -> Color

// Types and methods
type Color
impl Compare for Color
impl Default for Color
impl Eq for Color
impl Hash for Color
impl Show for Color

pub struct Dependency[A] {
  value : A
  // private fields
}
impl Dependency {
  depend_on[A, B](Self[A], Self[B]) -> Unit
  modify[A](Self[A], (A) -> A) -> Unit
  new[A](() -> A) -> Self[A]
  update[A](Self[A], () -> A) -> Unit
}
impl[A : Compare] Compare for Dependency[A]
impl[A : Default] Default for Dependency[A]
impl[A : Eq] Eq for Dependency[A]
impl[A : Hash] Hash for Dependency[A]
impl[A : Show] Show for Dependency[A]
impl[A : ToJson] ToJson for Dependency[A]
impl[A : @quickcheck.Arbitrary] @quickcheck.Arbitrary for Dependency[A]

pub enum Element {
  Layout(String, Size, Array[(Vector, Element)])
  Render(Renderable)
  Control(Element, Handler)
}
impl Element {
  border(Self, thickness~ : Thinkness, color~ : Color) -> Self
  coordinate(Array[Self]) -> Self
  ellipse(center~ : Vector, strokeColor~ : Color, fillColor~ : Color, radiusX~ : Int, radiusY~ : Int, rotation~ : Double, startAngle~ : Double, endAngle~ : Double, counterclockwise~ : Bool, lineWidth~ : Int) -> Self
  handle(Self, on_click? : () -> Unit, on_double_click? : () -> Unit, on_mouse_enter? : () -> Unit, on_mouse_leave? : () -> Unit) -> Self
  hstack(Array[Self], spacing~ : Int) -> Self
  layer(Array[(Vector, Self)]) -> Self
  line(p1~ : Vector, p2~ : Vector, color~ : Color, lineWidth~ : Int = ..) -> Self
  padding(Self, thickness~ : Thinkness, color~ : Color) -> Self
  rectangle(color~ : Color, size~ : Size) -> Self
  round_border(Self, thickness~ : Int, color~ : Color, radius~ : Int) -> Self
  round_padding(Self, thickness~ : Int, color~ : Color, radius~ : Int) -> Self
  round_rectangle(color~ : Color, size~ : Size, radius~ : Int) -> Self
  size(Self) -> Size
  spacer(Size) -> Self
  text(text~ : String, font~ : Font, color~ : Color) -> Self
  to_layout_sequence(Self, Vector) -> Array[(Vector, Self)]
  to_render_sequence(Self, Vector) -> Iter[(Vector, Renderable)]
  vstack(Array[Self], spacing~ : Int) -> Self
}
impl Show for Element

pub(all) struct Font {
  family : Array[String]
  genericFamily : Array[GenericFontFamily]
  size : Int
  style : FontStyle
  weight : Int
}
impl Font {
  bounding_box_ascent(Self, String) -> Int
  bounding_box_descent(Self, String) -> Int
  height(Self, String) -> Int
  new(family~ : Array[String] = .., genericFamily~ : Array[GenericFontFamily] = .., size~ : Int = .., style~ : FontStyle = .., weight~ : Int = ..) -> Self
  width(Self, String) -> Int
}
impl Compare for Font
impl Default for Font
impl Eq for Font
impl Show for Font

pub(all) enum FontStyle {
  Normal
  Italic
}
impl Compare for FontStyle
impl Eq for FontStyle
impl Hash for FontStyle
impl Show for FontStyle

pub(all) enum GenericFontFamily {
  Serif
  SansSerif
  Monospace
  Cursive
  Fantasy
  SystemUI
  UISerif
  UISansSerif
  UIMonospace
  UIRounded
  Math
  Emoji
  FangSong
}
impl Compare for GenericFontFamily
impl Eq for GenericFontFamily
impl Hash for GenericFontFamily
impl Show for GenericFontFamily

pub struct Handler {
  id : Int
  on_click : (() -> Unit)?
  on_double_click : (() -> Unit)?
  on_mouse_enter : (() -> Unit)?
  on_mouse_leave : (() -> Unit)?
}
impl Compare for Handler
impl Default for Handler
impl Eq for Handler
impl Hash for Handler
impl Show for Handler

pub(all) struct Rect {
  offset : Vector
  size : Size
}
impl Rect {
  bottom(Self) -> Int
  left(Self) -> Int
  new(Vector, Size) -> Self
  right(Self) -> Int
  top(Self) -> Int
}
impl Compare for Rect
impl Default for Rect
impl Eq for Rect
impl Hash for Rect
impl Show for Rect

pub enum Renderable {
  Text(Color, Size, String, Font)
  Rectangle(Color, Size)
  Border(Color, Size, Thinkness)
  Line(Color, Size, Vector, Vector, Int)
  Ellipse(Color, Color, Size, Vector, Int, Int, Double, Double, Double, Bool, Int)
  RoundedBorder(Color, Size, Int, Int)
  RoundedRectangle(Color, Size, Int)
}
impl Renderable {
  render(Self, Vector, @dom.CanvasRenderingContext2D) -> Unit
  render_sequence(@dom.CanvasRenderingContext2D, Iter[(Vector, Self)]) -> Unit
  size(Self) -> Size
}
impl Show for Renderable

pub(all) struct Size {
  width : Int
  height : Int
}
impl Size {
  new(Int, Int) -> Self
}
impl Compare for Size
impl Default for Size
impl Eq for Size
impl Hash for Size
impl Show for Size

pub(all) struct Thinkness {
  left : Int
  top : Int
  right : Int
  bottom : Int
}
impl Thinkness {
  new(Int, Int, Int, Int) -> Self
  same(Int) -> Self
}
impl Compare for Thinkness
impl Default for Thinkness
impl Eq for Thinkness
impl Hash for Thinkness
impl Show for Thinkness

pub(all) struct Vector {
  x : Int
  y : Int
}
impl Vector {
  inside(Self, Rect) -> Bool
  inside_window(Self) -> Bool
  new(Int, Int) -> Self
}
impl Add for Vector
impl Compare for Vector
impl Default for Vector
impl Eq for Vector
impl Hash for Vector
impl Show for Vector

type Widget[S]
impl Widget {
  depend_on[A, B](Self[A], Self[B]) -> Unit
  hover[T](() -> T, leave~ : (T) -> Element, enter~ : (T) -> Element) -> Self[T]
}

// Type aliases
pub typealias OnClick = () -> Unit

pub typealias OnMouseEnter = () -> Unit

pub typealias OnMouseLeave = () -> Unit

// Traits

